---
output:
 always_allow_html: true
---

title: "K-means Clustering"
output:
  html_document: 
    toc: yes
    keep_md: yes
  pdf_document:
    toc: yes
  word_document:
    toc: yes
date: "`r Sys.Date()`"
---

## Customer Segmentation Project in R

Customer Segmentation is one of the most important applications of unsupervised learning. Using clustering techniques, companies can identify the several segments of customers allowing them to target the potential user base. In this machine learning project, we will make use of K-means clustering which is the essential algorithm for clustering unlabeled dataset.

## What is Customer Segmentation?

Customer Segmentation is the process of division of customer base into several groups of individuals that share a similarjity in different ways that are relevant to marketing such as gender, age, interests, and miscellaneous spending habits.

## Implementing Customer Segmentation in R?

In the first step of this data science project, we will perform data exploration.

We will import the essential packages required for this role and then read our data.

Finally, we will go through the input data to gain necessary insights about it.

## Required Packages

```{r,results='hide',message=FALSE,warning=FALSE}
install.packages('readxl')
install.packages('tidyverse')
install.packages('janitor')
install.packages('plotly')
install.packages('plotrix')

```

## Libraries Required

```{r, results='hide',message=FALSE,warning=FALSE}
library(readxl)
library(dplyr)
library(janitor)
library(ggplot2)
library(plotly)
library(plotrix)
library(purrr)
```

## Data Importing

```{r}
df_customerData <- read_xlsx('Worksheet in Lab Assessment.xlsx')

```

## Data Cleaning

 Look for Null values in Data and Removing the nulls

```{r}
is.null(df_customerData)
na.omit(df_customerData)
```

##### Variables names cleaning

```{r}
df_customerData |>
  clean_names() -> df_customerData
```

## Exploratory Data Analysis

Start EDA of the Data by first checking the structure and dimensions of dataset to better understand the Data

```{r}
dim(df_customerData)
str(df_customerData)
names(df_customerData) 
head(df_customerData) 
summary(df_customerData)
```

We will now display the standard deviation of our variable "age" using the sd() function and use the summary() function to "age".

```{r,f}
summary(df_customerData$age) 
sd(df_customerData$age)
```

###### We have data of customers with an average age of 38 years minimum age is 18 and maximum age is 70 with 75% customers having age is equal to or less than 49 years

## Age Visualization

We want to see the Age Distribution so we need to visually see how the ages of customers are distributed in the dataset

## Histogram To Visualize Age Distribution

```{r,warning=FALSE,message=FALSE}
ggplotly(ggplot(df_customerData,aes(age))+
           geom_histogram(binwidth = 4,col = '#000000',fill= '#0099F8')+
           stat_bin(binwidth = 4,geom = 'text',color = '#000000', 
           aes(label = ..count..,vjust = 0.9))+
           labs(x= "Age Groups", y = "Frequency",
                title = "Age Frequency Distribution Histogram")+
           theme(axis.text.x = element_text(colour = 'black'),
                 axis.text.y = element_text(colour = 'black'),
                 axis.title = element_text(color ='#000000',
                                            family = "Century Gothic", face = 'plain'),
                 title = element_text(face = "bold.italic",family = "Century Gothic")))

```

## Box plot for observing Age distribution in Male and female

```{r}
ggplotly(ggplot(df_customerData,aes(gender,age,fill = gender))+
           geom_boxplot()+
  labs(x= "Age Groups", y = "Age",
       title = "Age Frequency Distribution Histogram")+
  theme(axis.text.x = element_text(colour = 'black'),
        axis.text.y = element_text(colour = 'black'),
        axis.title = element_text(color ='#000000',
                                  family = "Century Gothic", face = 'plain'),
        title = element_text(face = "plain",family = "Century Gothic"))+
  scale_fill_discrete(name = "Gender"))


```

```{r}
ggplot(df_customerData,aes(age,label = ..count..,fill = gender))+
  geom_histogram(binwidth = 4,color = 'white')+
  stat_bin(binwidth = 4,geom = 'text',
           aes(label = ..count..,vjust = 1.5))+
  labs(x= "Age Groups", y = "Frequency",
       title = "Age Frequency Distribution Histogram")+
  theme(axis.text.x = element_text(colour = 'black'),
        axis.text.y = element_text(colour = 'black'),
        axis.title = element_text(color ='#000000',
                                  family = "Century Gothic", face = 'plain'),
        title = element_text(face = "plain",family = "Century Gothic"))+
        scale_fill_discrete(name = "Gender")

```

## visualizing Males and females ratio pie chart showing percentages of males and females

```{r}
 a <- table(df_customerData$gender)
pct=round(a/sum(a)*100)
lbs=paste(c("Female","Male")," ",pct,"%",sep=" ")
library(plotrix)
pie3D(a,labels=lbs,
      main="Pie Chart Depicting Ratio of Female and Male")
```

## Bar graph to show no. of males and females

```{r}

ggplotly(ggplot(df_customerData,aes(gender,fill = gender))+
  geom_bar()+
  labs(x= "Gender", y = "Counts",
       title = "No. of Males and Females")+
  theme(axis.text.x = element_text(colour = 'black'),
        axis.text.y = element_text(colour = 'black'),
        axis.title = element_text(color ='#000000',
                                  family = "Century Gothic", face = 'plain'),
        title = element_text(face = "plain",family = "Century Gothic"))+
  scale_fill_discrete(name = "Gender"))
```

From the above graph, we conclude that the percentage of females is 56%, whereas the percentage of male in the customer data set is 44%.

## #Analysis of the Annual Income of the Customers:

```{r}

summary(df_customerData$annual_income_k)
sd(df_customerData$annual_income_k)  
#Histogram for Annual Income
hist(df_customerData$annual_income_k,
     col="#660033",
     main="Histogram for Annual Income",
     xlab="Annual Income Class",
     ylab="Frequency",
     labels=TRUE)

```

From the above descriptive analysis, we conclude that the minimum annual income of the customers is 15 and the maximum income is 137.People earning an average income of 70 have the highest frequency count in our histogram distribution. The average salary of all the customers is 60.56

## Density plot for Gender base Annual Income Distribution

```{r}

ggplot(df_customerData,aes(annual_income_k,fill = gender))+
geom_density(col = 'black',alpha = 0.2)+
  facet_wrap(~gender)+xlim(0,150)

```

Desnity plot shows normal distribution of annual incomes along both males and females

## Descriptive Analysis of Spending Scores of Customers

```{r}
summary(df_customerData$spending_score_1_100)

ggplot(df_customerData,aes(spending_score_1_100))+
         geom_histogram(binwidth = 10,col = '#000000',fill= '#0099F8')+
  stat_bin(binwidth = 10,geom = 'text',color = '#000000', 
           aes(label = ..count..,vjust = -0.5))+
  labs(x= "Spending Scores", y = "Frequency",
       title = "Spending Scores Distribution Histogram")+theme_bw()
```

We have almost 21% customers with a spending score 0f 50 and maximum score is 99 and minimun is 1 with an average score of 50. Approximately 33% customers falls in the class of 40-50 spending scores

## K-means Algorithm :

While using the k-means clustering algorithm, the first step is to indicate the number of clusters (k) that we wish to produce in the final output. The algorithm starts by selecting k objects from dataset randomly that will serve as the initial centers for our clusters. These selected objects are the cluster means, also known as centroids. Then, the remaining objects have an assignment of the closest centroid. This centroid is defined by the Euclidean Distance present between the object and the cluster mean. We refer to this step as "cluster assignment". When the assignment is complete, the algorithm proceeds to calculate new mean value of each cluster present in the data. After the recalculation of the centers, the observations are checked if they are closer to a different cluster. Using the updated cluster mean, the objects undergo reassignment. This goes on repeatedly through several iterations until the cluster assignments stop altering. The clusters that are present in the current iteration are the same as the ones obtained in the previous iteration.

## Determining Optimal Clusters

While working with clusters, you need to specify the number of clusters to use. You would like to utilize the optimal number of clusters. To help you in determining the optimal clusters, there are three popular methods --

**Elbow method**

**Silhouette method**

**Gap statistic**

## Elbow Method:

The main goal behind cluster partitioning methods like k-means is to define the clusters such that the intra-cluster variation stays minimum.

minimize(sum W(Ck)), k=1...k

Where Ck represents the kth cluster and W(Ck) denotes the intra-cluster variation. With the measurement of the total intra-cluster variation, one can evaluate the compactness of the clustering boundary. We can then proceed to define the optimal clusters as follows --

First, we calculate the clustering algorithm for several values of k. This can be done by creating a variation within k from 1 to 10 clusters. We then calculate the total intra-cluster sum of square (iss). Then, we proceed to plot iss based on the number of k clusters. This plot denotes the appropriate number of clusters required in our model. In the plot, the location of a bend or a knee is the indication of the optimum number of clusters. Let us implement this in R as follows.

```{r}
set.seed(123)
# function to calculate total intra-cluster sum of square 
iss <- function(k) {
  kmeans(df_customerData[,3:5],k,iter.max=100,nstart=100,algorithm="Lloyd" )$tot.withinss
}

k.values <- 1:10


iss_values <- map_dbl(k.values, iss)

plot(k.values, iss_values,
     type="b", pch = 19, frame = FALSE, 
     xlab="Number of clusters K",
     ylab="Total intra-clusters sum of squares")
```

From the above graph, we conclude that 4 is the appropriate number of clusters since it seems to be appearing at the bend in the elbow plot.

## Visualizing the Clustering Results using the First Two Principle Components

```{r}
pcclust=prcomp(df_customerData[,3:5],scale=FALSE) #principal component analysis
summary(pcclust)
pcclust$rotation[,1:2]

```

## Visualizing Final Output Clusters

```{r}
k4 <- kmeans(df_customerData[,3:5],4,iter.max=100,nstart=50,algorithm="Lloyd") 
set.seed(1)
ggplotly(ggplot(df_customerData, aes(x =annual_income_k, y = spending_score_1_100)) + 
  geom_point(stat = "identity", aes(color = as.factor(k4$cluster))) +
  scale_color_discrete(name=" ",
                       breaks=c("1", "2", "3", "4", "5","6"),
                       labels=c("Cluster 1", "Cluster 2", "Cluster 3", "Cluster 4", "Cluster 5","Cluster 6")) +
  ggtitle("Segments of Mall Customers", subtitle = "Using K-means Clustering")+
  labs(x = 'Annual Income Thousands ($)', y ='Spending score '))
```

From the above visualization, we observe that there is a distribution of 6 clusters as follows --

Cluster 6 and 4 -- These clusters represent the customer_data with the medium income salary as well as the medium annual spend of salary.

Cluster 1 -- This cluster represents the customer_data having a high annual income as well as a high annual spend.

Cluster 3 -- This cluster denotes the customer_data with low annual income as well as low yearly spend of income.

Cluster 2 -- This cluster denotes a high annual income and low yearly spend.

Cluster 5 -- This cluster represents a low annual income but its high yearly expenditure.

```{r}
pcclust=prcomp(df_customerData[,3:5],scale=FALSE) #principal component analysis
summary(pcclust)

pcclust$rotation[,1:2]



kCols = function(vec){cols=rainbow (length (unique (vec)))
return (cols[as.numeric(as.factor(vec))])}

digCluster<-k4$cluster; dignm<-as.character(digCluster); # K-means clusters

plot(pcclust$x[,1:2], col =kCols(digCluster),pch =19,xlab ="K-means",ylab="classes")
legend("bottomleft",unique(dignm),fill=unique(kCols(digCluster)))
```

-   Cluster 4 and 1 -- These two clusters consist of customers with medium PCA1 and medium PCA2 score.

-   Cluster 6 -- This cluster represents customers having a high PCA2 and a low PCA1.

-   Cluster 5 -- In this cluster, there are customers with a medium PCA1 and a low PCA2 score.

-   Cluster 3 -- This cluster comprises of customers with a high PCA1 income and a high PCA2.

-   Cluster 2 -- This comprises of customers with a high PCA2 and a medium annual spend of income.

With the help of clustering, we can understand the variables much better, prompting us to take careful decisions. With the identification of customers, companies can release products and services that target customers based on several parameters like income, age, spending patterns, etc. Furthermore, more complex patterns like product reviews are taken into consideration for better segmentation.
